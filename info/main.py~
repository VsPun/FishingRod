#! /usr/bin/python

import os

from django.utils import simplejson
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp import util

class MainPage(webapp.RequestHandler):
    """ Renders the main template."""
    def get(self):
        template_values = { 'title':'AJAX Add (via GET)', }
        path = os.path.join(os.path.dirname(__file__), "index.html")
        self.response.out.write(template.render(path, template_values))


class RPCHandler(webapp.RequestHandler):
    """ Allows the functions defined in the RPCMethods class to be RPCed."""
    def __init__(self):
        webapp.RequestHandler.__init__(self)
        self.methods = RPCMethods()

    def get(self):
        func = None

        action = self.request.get('action')
        if action:
            if action[0] == '_':
                self.error(403) # access denied
                return
            else:
                func = getattr(self.methods, action, None)

        if not func:
            self.error(404) # file not found
            return

        args = ()
        while True:
            key = 'arg%d' % len(args)
            val = self.request.get(key)
            if val:
                args += (simplejson.loads(val),)
            else:
                break
        result = func(*args)
        self.response.out.write(simplejson.dumps(result))


class RPCMethods:
    """ Defines the methods that can be RPCed.
    NOTE: Do not allow remote callers access to private/protected "_*" methods.
    """

    def Add(self, *args):
        # The JSON encoding may have encoded integers as strings.
        # Be sure to convert args to any mandatory type(s).
        #ints = [int(arg) for arg in args]
        try:
            f_b_cnt = open('data/b_cnt.txt','r')
            str_b_cnt = f_b_cnt.read()
            f_b_cnt.close()
        except:
            str_b_cnt = "Unknown"
            
                        
        try:
            f_b_st = open("data/b_st.txt",'r')
            str_b_st = f_b_st.read()
            f_b_st.close()
        except:
            str_b_st = "Unknown"
           
        try:
            f_e_cnt = open("data/e_cnt.txt",'r')
            str_e_cnt = f_e_cnt.read()
            f_e_cnt.close()
        except:
            str_e_cnt = "Unknown"
            
        try:
            f_e_st = open("data/e_st.txt",'r')
            str_e_st = f_e_st.read()
            f_e_st.close()
        except:
            str_e_st = "Unknown"

        try:
            f_x_cnt = open("data/x_cnt.txt",'r')
            str_x_cnt = f_x_cnt.read()
            f_x_cnt.close()
        except:
            str_e_cnt = "Unknown"
            
        try:
            f_x_st = open("data/x_st.txt",'r')
            str_x_st = f_x_st.read()
            f_x_st.close()
        except:
            str_x_st = "Unknown"            
        return str_b_st + "," + str_b_cnt + "," + str_e_st + "," + str_e_cnt + "," + str_x_st + "," + str_x_cnt
            
def main():
    app = webapp.WSGIApplication([
        ('/', MainPage),
        ('/rpc', RPCHandler),
        ], debug=True)
    util.run_wsgi_app(app)

if __name__ == '__main__':
    main()
